window -width 490 -title "Specify Your Visualization" "window";
scrollLayout;
	columnLayout -adjustableColumn true;
		frameLayout -collapsable true -collapse false -label "Visualization";
			columnLayout;
				frameLayout -collapsable false -width 492 -label "Basics";
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "Please select your audio file.";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center"; 
						button -label "Browse..." -command "browser" "browse_button";
						textField "filename_field";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 122 500 -columnAlign2 "right" "center";
						text "";
						checkBox -label "Automatically import sound file into Maya timeline" -value false "import_checkbox";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "Which kind of geometric object should populate your visualization?";
						setParent ..;
					radioButtonGrp -label "Shape" -numberOfRadioButtons 3 -labelArray3 "Spheres" "Cubes" "Speakers" -select 1 "shape_radio";
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "If animating spheres or cubes, how many frequency bands/geometric objects would you like?";
						setParent ..;
					intSliderGrp -label "Quantity" -field true -minValue 1 -maxValue 32 -value 3 "bands_slider";
					setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "If animating speakers, how would you like the bass, midrange, and treble to divide the frequency range?  Note: The values must sum to 32";
						setParent ..;
					intSliderGrp -label "Bass" -field true -minValue 1 -maxValue 30 -value 10 "bass_slider";
					intSliderGrp -label "Midrange" -field true -minValue 1 -maxValue 30 -value 11 "mid_slider";
					intSliderGrp -label "Treble" -field true -minValue 1 -maxValue 30 -value 11 "treble_slider";
					setParent ..;
				frameLayout -collapsable false -width 392 -label "Color";
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "Objects' color will be filled using a gradient from left to right. Choose color values for each end.";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text -label "Left End";
						canvas -rgbValue 1 1 1 -width 300 -pressCommand ("chooser("+0+")") "left_color";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text -label "Right End";
						canvas -rgbValue 1 1 1 -width 300 -pressCommand ("chooser("+1+")") "right_color";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "Choose your color interpolation method. HSV interpolation is better for bright colors directly across the color spectrum. RGB interpolation is better for combinations which include a very light or a very dark color.";
						setParent ..;
					radioButtonGrp -label "Interpolation Method" -numberOfRadioButtons 2 -labelArray2 "HSV" "RGB" -select 1 "interpolation_radio";
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "You may also choose to link each ball's color brightness to its band value.";
						setParent ..;
					radioButtonGrp -label "Driver" -numberOfRadioButtons 2 -labelArray2 "Color Fixed" "Sound Drives Color" -select 1 "color_radio";
					button -label "Create Scene" -command "gatherer()";
					setParent ..;
				setParent ..;
			setParent ..;
		frameLayout -collapsable true -collapse false -label "Rendering";
			columnLayout;
				intSliderGrp -label "Start Frame" -field true -minValue 0 -maxValue 10000 -value 0 "start_frame";
				intSliderGrp -label "End Frame" -field true -minValue 0 -maxValue 10000 -value 24 "end_frame";;
				rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "The file will render into 'maya/projects/default/images' using the current camera's perspective.";
						setParent ..;
				button -label "Render Animation" -command "sceneRenderer()";
				setParent ..;
			setParent ..;
showWindow;

proc browser() {
	string $multipleFilters = "WAV Audio (*.wav);;All Files (*.*)";
	string $result[] = `fileDialog2 -fileFilter $multipleFilters -selectFileFilter "WAV Audio" -dialogStyle 2 -fileMode 1`;
	textField -edit -text $result[0] "filename_field";
}
proc chooser(int $leftright) {
	colorEditor;
	if (`colorEditor -query -result`) {
		float $values[] = `colorEditor -query -rgbValue`;
		if ($leftright==0) canvas -edit -rgbValue $values[0] $values[1] $values[2] "left_color";
		else canvas -edit -rgbValue $values[0] $values[1] $values[2] "right_color";
	}
}
proc gatherer() {
    file -f -new;
	string $filename = `textField -query -text "filename_field"`;
	int $shape = `radioButtonGrp -query -select "shape_radio"`;
	float $left[] = `canvas -query -rgbValue "left_color"`;
	float $right[] = `canvas -query -rgbValue "right_color"`;
	int $interpolation = `radioButtonGrp -query -select "interpolation_radio"`;
	int $color = `radioButtonGrp -query -select "color_radio"`;
	int $import = `checkBox -query -value "import_checkbox"`;
	if ($import) doSoundImportArgList ("1", {$filename,"0.0"});
	if($shape==1 || $shape==2){
	    int $bands = `intSliderGrp -query -value "bands_slider"`;
	    grapes($filename, $bands, $shape, $left, $right, $interpolation, $color);
	}
	else{
	    int $bass = `intSliderGrp -query -value "bass_slider"`;
	    int $mid = `intSliderGrp -query -value "mid_slider"`;
	    int $treble = `intSliderGrp -query -value "treble_slider"`;
	    speakerScene($filename, $bass, $mid, $treble, $left, $right, $interpolation, $color);
	}
}
proc sceneRenderer() {
	setCurrentRenderer mayaHardware;
	setAttr "defaultRenderGlobals.animation" 1;
	setAttr "defaultRenderGlobals.imageFormat" 7;  //iff format
	int $start_frame = `intSliderGrp -query -value "start_frame"`;
	int $end_frame = `intSliderGrp -query -value "end_frame"`;
	setAttr ("defaultRenderGlobals.startFrame") $start_frame;
	setAttr ("defaultRenderGlobals.endFrame") $end_frame;
	batchRender -filename `file -query -sceneName`;
}