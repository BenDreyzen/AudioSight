proc browser() {
	string $multipleFilters = "WAV Audio (*.wav);;All Files (*.*)";
	string $result[] = `fileDialog2 -fileFilter $multipleFilters -selectFileFilter "WAV Audio" -dialogStyle 2 -fileMode 1`;
	textField -edit -text $result[0] "filename_field";
}
proc chooser(int $leftright) {
	colorEditor;
	if (`colorEditor -query -result`) {
		float $values[] = `colorEditor -query -rgbValue`;
		if ($leftright==0) canvas -edit -rgbValue $values[0] $values[1] $values[2] "left_color";
		else canvas -edit -rgbValue $values[0] $values[1] $values[2] "right_color";
	}
}
proc gatherer() {
	file -force -newFile;
	string $filename = `textField -query -text "filename_field"`;
	int $shape = `radioButtonGrp -query -select "shape_radio"`;
	float $left[] = `canvas -query -rgbValue "left_color"`;
	float $right[] = `canvas -query -rgbValue "right_color"`;
	int $interpolation = `radioButtonGrp -query -select "interpolation_radio"`;
	int $color = `radioButtonGrp -query -select "color_radio"`;
	int $import = `checkBox -query -value "import_checkbox"`;
	if ($import) doSoundImportArgList ("1", {$filename,"0.0"});
	if($shape==1 || $shape==2){
		int $bands = `intSliderGrp -query -value "bands_slider"`;
		grapesScene($filename,$bands,$shape,$left,$right,$interpolation,$color);
	}
	else{
		int $bass = `intSliderGrp -query -value "bass_slider"`;
		int $mid = `intSliderGrp -query -value "mid_slider"`;
		int $treble = `intSliderGrp -query -value "treble_slider"`;
		speakerScene($filename,$bass,$mid,$treble,$left,$right,$interpolation,$color);
	}
}
proc sceneRenderer() {
	int $type = `radioButtonGrp -query -select "type_radio"`;
	setCurrentRenderer mayaHardware;
	setAttr "defaultRenderGlobals.animation" 1;
	if ($type == 1) setAttr "defaultRenderGlobals.imageFormat" 7;
	if ($type == 2) setAttr "defaultRenderGlobals.imageFormat" 23; //AVI Format
	int $start_frame = `intSliderGrp -query -value "start_frame"`;
	int $end_frame = `intSliderGrp -query -value "end_frame"`;
	setAttr ("defaultRenderGlobals.startFrame") $start_frame;
	setAttr ("defaultRenderGlobals.endFrame") $end_frame;
	setAttr "defaultRenderGlobals.enableDefaultLight" 1;
	batchRender -filename `file -query -sceneName`;
}
global proc grapesScene(string $filename, int $bands, int $shape, float $left[], float $right[], int $interpolation, int $color) {
	string $audioFile = `sound -file $filename -offset 0`;
	
	string $audioNodeName = `createNode audioNode`;
	connectAttr time1.outTime ($audioNodeName+".inTime");
	connectAttr ($audioFile+".filename") ($audioNodeName+".filePath");
	connectAttr ($audioFile+".offset") ($audioNodeName+".offset");
	setAttr ($audioNodeName+".bandsNumber") $bands;
	if ($shape==2) setAttr ($audioNodeName+".ampScale") 2.0;
	
	int $i;
	for ($i = 0; $i < $bands; $i++) {
		string $temp[];
		if ($shape==1) {
			$temp = `polySphere`;
			connectAttr ($audioNodeName+".fftOut["+$i+"]") ($temp[1]+".radius");
		}
		else if ($shape==2) {
			$temp = `polyCube`;
			connectAttr ($audioNodeName+".fftOut["+$i+"]") ($temp[1]+".width");
			connectAttr ($audioNodeName+".fftOut["+$i+"]") ($temp[1]+".height");
			connectAttr ($audioNodeName+".fftOut["+$i+"]") ($temp[1]+".depth");
		}
		setAttr ($temp[0]+".translateX") (($i-$bands/2)*1);
		if ($i>0) { //The first lambert 'lambert1' already exists. No need to create it again.
			string $lambert = `createNode lambert`;
			int $n = `size $temp[0]`;
			string $base;
			if ($shape==1) $base = "pSphere";
			else if ($shape==2) $base = "pCube";
			defaultNavigation -source ($lambert) -destination ("|"+$temp[0]+"|"+$base+"Shape"+($i+1)+".instObjGroups[0]") -connectToExisting;
			//^^ This connects the newly created lambert to the appropriate shape.
		}
		float $if = $i;
		float $bandsf = $bands;
		float $interprgb[];
		if ($interpolation==1) {
			float $lefthsv[] = RGBtoHSV($left);
			float $righthsv[] = RGBtoHSV($right);
			$interphsv = interphsv($lefthsv, $righthsv, $if/$bandsf);
			$interprgb = HSVtoRGB($interphsv);
		}
		else if ($interpolation==2) $interprgb = interprgb($left, $right, $if/$bandsf);
		if ($color==1) {
			setAttr ("lambert"+($i+1)+".colorR") ($interprgb[0]);
			setAttr ("lambert"+($i+1)+".colorG") ($interprgb[1]);
			setAttr ("lambert"+($i+1)+".colorB") ($interprgb[2]);
		}
		else if ($color==2) {
			expression -string ("lambert"+($i+1)+".colorR = "+$audioNodeName+".fftOut["+$i+"]*"+$interprgb[0]);
			expression -string ("lambert"+($i+1)+".colorG = "+$audioNodeName+".fftOut["+$i+"]*"+$interprgb[1]);
			expression -string ("lambert"+($i+1)+".colorB = "+$audioNodeName+".fftOut["+$i+"]*"+$interprgb[2]);
		}
	}
}

proc float[] RGBtoHSV(float $rgb[]) {
	float $hsv[];
	float $min = min(min($rgb[0], $rgb[1]), $rgb[2]);
	float $max = max(max($rgb[0], $rgb[1]), $rgb[2]);
	$hsv[2] = $max;															// v
	float $delta = $max - $min;
	if ($max != 0) $hsv[1] = $delta/$max;									// s
	else {
		// r = g = b = 0													// s = 0, v is undefined
		$hsv[1] = 0;
		$hsv[0] = -1;
		return $hsv;
	}
	if ($delta == 0) $hsv[0] = 0;
	else if ($rgb[0] == $max) $hsv[0] = ($rgb[1] - $rgb[2]) / $delta;		// between yellow & magenta
	else if ($rgb[1] == $max) $hsv[0] = 2 + ($rgb[2] - $rgb[0]) / $delta;	// between cyan & yellow
	else $hsv[0] = 4 + ($rgb[0] - $rgb[1]) / $delta;						// between magenta & cyan
	$hsv[0] = $hsv[0]*60;													// degrees
	if ($hsv[0] < 0) $hsv[0] = $hsv[0] + 360;
	return $hsv;
}
proc float[] HSVtoRGB(float $hsv[]) {
	float $rgb[];
	int $i;
	float $f, $p, $q, $t;
	if ($hsv[1] == 0) {
		// achromatic (grey)
		$rgb[0] = $hsv[2];
		$rgb[1] = $hsv[2];
		$rgb[2] = $hsv[2];
		return $rgb;
	}
	$hsv[0] = $hsv[0] / 60;			// sector 0 to 5
	$i = floor($hsv[0]);
	$f = $hsv[0] - $i;			// factorial part of h
	$p = $hsv[2] * (1 - $hsv[1]);
	$q = $hsv[2] * (1 - $hsv[1] * $f);
	$t = $hsv[2] * (1 - $hsv[1] * (1 - $f));
	switch($i) {
		case 0: $rgb = {$hsv[2], $t, $p}; break;
		case 1: $rgb = {$q, $hsv[2], $p}; break;
		case 2: $rgb = {$p, $hsv[2], $t}; break;
		case 3: $rgb = {$p, $q, $hsv[2]}; break;
		case 4: $rgb = {$t, $p, $hsv[2]}; break;
		default: $rgb = {$hsv[2], $p, $q}; break;
	}
	return $rgb;
}
proc float[] interprgb(float $left[], float $right[], float $ratio) {
	float $interprgb[];
	$interprgb[0] = $left[0] + ($right[0] - $left[0])*$ratio;
	$interprgb[1] = $left[1] + ($right[1] - $left[1])*$ratio;
	$interprgb[2] = $left[2] + ($right[2] - $left[2])*$ratio;
	return $interprgb;
}
proc float[] interphsv(float $lefthsv[], float $righthsv[], float $ratio) {
	float $interphsv[];
	if (`abs ($lefthsv[0]-$righthsv[0])` <= 180) $interphsv[0] = $lefthsv[0]+($righthsv[0]-$lefthsv[0])*$ratio;
	else {
		if ($lefthsv[0] > $righthsv[0]) $lefthsv[0] = $lefthsv[0] - 360;
		else $righthsv[0] = $righthsv[0] - 360;
		$interphsv[0] = $lefthsv[0] + ($righthsv[0] - $lefthsv[0])*$ratio;
		if ($interphsv[0] < 0) $interphsv[0] = $interphsv[0] + 360;
	}
	$interphsv[1] = $lefthsv[1]+($righthsv[1]-$lefthsv[1])*$ratio;
	$interphsv[2] = $lefthsv[2]+($righthsv[2]-$lefthsv[2])*$ratio;
	return $interphsv;
}
proc float rmsBand(string $audioNodeName, int $start, int $end) {
	int $i=0;
	string $band;
	float $rms=0;
	float $temp;
	for($i=$start; $i<$end; $i++){
		$band = $audioNodeName+".fftOut["+$i+"]";
		$temp = `getAttr $band`;
		$temp = $temp*$temp;
		$rms=$rms+$temp;
	}
	$rms=sqrt($rms);
	return $rms;
}

proc speakerScene(string $filename, int $bass, int $mid, int $treble, float $left[], float $right[], int $interpolation, int $color) {
	string $audioFile = `sound -file $filename -offset 0`;

	string $audioNodeName = `createNode audioNode`;
	connectAttr time1.outTime ($audioNodeName+".inTime");
	connectAttr ($audioFile+".filename") ($audioNodeName+".filePath");
	connectAttr ($audioFile+".offset") ($audioNodeName+".offset"); 
	setAttr ($audioNodeName+".ampScale") 2.0;

	int $lowest = 0;
	$mid = $mid + $bass;
	$treble = $treble + $mid;

//create 3 planes
	polyPlane -ch on -o on -w 10 -h 10 -sw 1 -sh 1 -cuv 2 ;
	move -r 0 2 12 ;
	setAttr "polyPlane1.subdivisionsWidth" 50;
	setAttr "polyPlane1.subdivisionsHeight" 50;
	polyPlane -ch on -o on -w 10 -h 10 -sw 1 -sh 1 -cuv 2 ;
	move -r 0 2 0 ;
	setAttr "polyPlane2.subdivisionsWidth" 50;
	setAttr "polyPlane2.subdivisionsHeight" 50;
	polyPlane -ch on -o on -w 10 -h 10 -sw 1 -sh 1 -cuv 2 ;
	move -r 0 2 -12 ;
	setAttr "polyPlane3.subdivisionsWidth" 50;
	setAttr "polyPlane3.subdivisionsHeight" 50;
	select -r pPlane1;
	setAttr "lambert1.color" -type double3 1 1 1 ;
	
//create the boundary box
	polyPlane -ch on -o on -w 10 -h 34 -sw 1 -sh 1 -cuv 2 ;
	setAttr "pPlane4.rotateZ" -90;
	move -r 5 -3 0;
	polyPlane -ch on -o on -w 10 -h 34 -sw 1 -sh 1 -cuv 2 ;
	setAttr "pPlane5.rotateZ" -90;
	move -r -5 -3 0;
	polyPlane -ch on -o on -w 10 -h 10 -sw 1 -sh 1 -cuv 2 ;
	rotate -r -os -90 0 90 ;
	move -r 0 -3 17;
	polyPlane -ch on -o on -w 10 -h 10 -sw 1 -sh 1 -cuv 2 ;
	rotate -r -os -90 0 90 ;
	move -r 0 -3 -17;
	polyPlane -ch on -o on -w 10 -h 34 -sw 1 -sh 1 -cuv 2 ;
	move -r 0 -8 0;
	

//attach a deformer to each speaker
	SelectTool;
	select -r pPlane1;
	SoftModTool;
	move -r -os -wd 0 2 0 ;
	SelectTool;
	select -r pPlane2;
	SoftModTool;
	move -r -os -wd 0 2 0 ;
	SelectTool;
	select -r pPlane3;
	SoftModTool;
	move -r -os -wd 0 2 0 ;
	SelectTool;
	select -r pPlane1 ;

//allow for plane to be collided with
	rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;
	select -r pPlane2 ;
	rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;
	select -r pPlane3 ;
	rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;
	select -r pPlane4 ;
	rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;
	select -r pPlane5 ;
	rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;
	select -r pPlane6 ;
	rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;
	select -r pPlane7 ;
	rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;
	select -r pPlane8 ;
	rigidBody -passive -m 1 -dp 0 -sf 0.2 -df 0.2 -b 0.6 -l 0 -tf 200 -iv 0 0 0 -iav 0 0 0 -c 0 -pc 0 -i 0 0 0 -imp 0 0 0 -si 0 0 0 -sio none ;

//create gravity
	gravity -pos 0 0 0 -m 9.8 -att 0 -dx 0 -dy -1 -dz 0  -mxd -1  -vsh none -vex 0 -vof 0 0 0 -vsw 360 -tsr 0.5 ;
	connectDynamic -f gravityField1  pPlane1;
	connectDynamic -f gravityField1  pPlane2;
	connectDynamic -f gravityField1  pPlane3;

//create emitters
	emitter -pos 0 5 12 -type omni -r 100 -sro 0 -nuv 0 -cye none -cyi 1 -spd 1 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0 ;
	particle;
	emitter -pos 0 5 0 -type omni -r 100 -sro 0 -nuv 0 -cye none -cyi 1 -spd 1 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0 ;
	particle;
	emitter -pos 0 5 -12 -type omni -r 100 -sro 0 -nuv 0 -cye none -cyi 1 -spd 1 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0 ;
	particle;
	connectDynamic -em emitter1 particle1;
	connectDynamic -f gravityField1 particle1; ;
	connectDynamic -em emitter2 particle2;
	connectDynamic -f gravityField1 particle2; ;
	connectDynamic -em emitter3 particle3;
	connectDynamic -f gravityField1 particle3; ;

//allow for particles to collide with planes
	collision -r 1 -f 0 -o 0.01  pPlane1;
	collision -r 1 -f 0 -o 0.01  pPlane2;
	collision -r 1 -f 0 -o 0.01  pPlane3;
	collision -r 1 -f 0 -o 0.01  pPlane4;
	collision -r 1 -f 0 -o 0.01  pPlane5;
	collision -r 1 -f 0 -o 0.01  pPlane6;
	collision -r 1 -f 0 -o 0.01  pPlane7;
	collision -r 1 -f 0 -o 0.01  pPlane8;
	connectDynamic -c pPlane1  particle1;
	connectDynamic -c pPlane1  particle2;
	connectDynamic -c pPlane1  particle3;
	connectDynamic -c pPlane2  particle1;
	connectDynamic -c pPlane2  particle2;
	connectDynamic -c pPlane2  particle3;
	connectDynamic -c pPlane3  particle1;
	connectDynamic -c pPlane3  particle2;
	connectDynamic -c pPlane3  particle3;
	connectDynamic -c pPlane4  particle1;
	connectDynamic -c pPlane4  particle2;
	connectDynamic -c pPlane4  particle3;
	connectDynamic -c pPlane5  particle1;
	connectDynamic -c pPlane5  particle2;
	connectDynamic -c pPlane5  particle3;
	connectDynamic -c pPlane6  particle1;
	connectDynamic -c pPlane6  particle2;
	connectDynamic -c pPlane6  particle3;
	connectDynamic -c pPlane7  particle1;
	connectDynamic -c pPlane7  particle2;
	connectDynamic -c pPlane7  particle3;
	connectDynamic -c pPlane8  particle1;
	connectDynamic -c pPlane8  particle2;
	connectDynamic -c pPlane8  particle3;
	

//set attributes of particles
	setAttr "particleShape1.lifespanMode" 1;
	setAttr "particleShape1.lifespan" 3;
	setAttr "particleShape2.lifespanMode" 1;
	setAttr "particleShape2.lifespan" 3;
	setAttr "particleShape3.lifespanMode" 1;
	setAttr "particleShape3.lifespan" 3;
	setAttr "emitter1.rate" 10;
	setAttr "emitter2.rate" 10;
	setAttr "emitter3.rate" 10;
	addAttr -ln "rgbPP" -dt vectorArray particleShape1;
	addAttr -ln "rgbPP0" -dt vectorArray particleShape1;
	addAttr -ln "rgbPP" -dt vectorArray particleShape2;
	addAttr -ln "rgbPP0" -dt vectorArray particleShape2;
	addAttr -ln "rgbPP" -dt vectorArray particleShape3;
	addAttr -ln "rgbPP0" -dt vectorArray particleShape3;

//note the inheritColor is commented out for MAC because there is an inherent error within Maya.  Set to 1 so that particles may start colored
	setAttr "emitter1.inheritColor" 1;
	setAttr "emitter2.inheritColor" 1;
	setAttr "emitter3.inheritColor" 1;
	setAttr "rigidBody1.bounciness" 0.05;
	setAttr "rigidBody2.bounciness" 0.05;
	setAttr "rigidBody3.bounciness" 0.05;

//emit spheres
	setAttr "particleShape1.particleRenderType" 4;
	setAttr "particleShape2.particleRenderType" 4;
	setAttr "particleShape3.particleRenderType" 4;

//allows the deformer to create a speaker effect with the planes
	expression -string ("softMod1Handle.translateY = rmsBand(\""+$audioNodeName+"\","+$lowest+","+$bass+")*"+0.25);
	expression -string ("softMod2Handle.translateY = rmsBand(\""+$audioNodeName+"\","+$bass+","+$mid+")*"+0.25);
	expression -string ("softMod3Handle.translateY = rmsBand(\""+$audioNodeName+"\","+$mid+","+$treble+")*"+0.25);

//changes colors of the emitted spheres
	float $interprgb1[];
	float $interphsv1[];
	float $interprgb2[];
	float $interphsv2[];
	float $interprgb3[];
	float $interphsv3[];
	if ($interpolation==1) {
		float $lefthsv[] = RGBtoHSV($left);
		float $righthsv[] = RGBtoHSV($right);
		$interphsv1 = interphsv($lefthsv, $righthsv, 0);
		$interprgb1 = HSVtoRGB($interphsv1);
		$interphsv2 = interphsv($lefthsv, $righthsv, 0.5);
		$interprgb2 = HSVtoRGB($interphsv2);
		$interphsv3 = interphsv($lefthsv, $righthsv, 1);
		$interprgb3 = HSVtoRGB($interphsv3);
	}
	else if ($interpolation==2){
		$interprgb1 = interprgb($left, $right, 0);
		$interprgb2 = interprgb($left, $right, 0.5);
		$interprgb3 = interprgb($left, $right, 1);
	}
	if($color==1){
		setAttr ("emitter1.particleColorR") ($interprgb1[0]);
		setAttr ("emitter1.particleColorG") ($interprgb1[1]);
		setAttr ("emitter1.particleColorB") ($interprgb1[2]);
		
		setAttr ("emitter2.particleColorR") ($interprgb2[0]);
		setAttr ("emitter2.particleColorG") ($interprgb2[1]);
		setAttr ("emitter2.particleColorB") ($interprgb2[2]);
		
		setAttr ("emitter3.particleColorR") ($interprgb3[0]);		
		setAttr ("emitter3.particleColorG") ($interprgb3[1]);
		setAttr ("emitter3.particleColorB") ($interprgb3[2]);
	}
	else{
		expression -string ("emitter1.particleColorR = expression1.output[0]*"+$interprgb1[0]);
		expression -string ("emitter1.particleColorB = expression1.output[0]*"+$interprgb1[1]);
		expression -string ("emitter1.particleColorG = expression1.output[0]*"+$interprgb1[2]);
		
		expression -string ("emitter2.particleColorR = expression2.output[0]*"+$interprgb2[0]);
		expression -string ("emitter2.particleColorB = expression2.output[0]*"+$interprgb2[1]);
		expression -string ("emitter2.particleColorG = expression2.output[0]*"+$interprgb2[2]);
		
		expression -string ("emitter3.particleColorR = expression3.output[0]*"+$interprgb3[0]);
		expression -string ("emitter3.particleColorB = expression3.output[0]*"+$interprgb3[1]);
		expression -string ("emitter3.particleColorG = expression3.output[0]*"+$interprgb3[2]);
	}
}

window -width 490 -title "Specify Your Visualization" "window";
scrollLayout;
	columnLayout -adjustableColumn true;
		frameLayout -collapsable true -collapse false -label "Visualization";
			columnLayout;
				frameLayout -collapsable false -width 492 -label "Basics";
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "Please select your audio file.";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center"; 
						button -label "Browse..." -command "browser" "browse_button";
						textField "filename_field";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 122 500 -columnAlign2 "right" "center";
						text "";
						checkBox -label "Automatically import sound file into Maya timeline" -value false "import_checkbox";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "Which kind of geometric object should populate your visualization?";
						setParent ..;
					radioButtonGrp -label "Shape" -numberOfRadioButtons 3 -labelArray3 "Spheres" "Cubes" "Speakers" -select 1 "shape_radio";
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "If animating spheres or cubes, how many frequency bands/geometric objects would you like?";
						setParent ..;
					intSliderGrp -label "Quantity" -field true -minValue 1 -maxValue 32 -value 3 "bands_slider";
					setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "If animating speakers, how would you like the bass, midrange, and treble to divide the frequency range?  Note: The values must sum to 32";
						setParent ..;
					intSliderGrp -label "Bass" -field true -minValue 1 -maxValue 30 -value 10 "bass_slider";
					intSliderGrp -label "Midrange" -field true -minValue 1 -maxValue 30 -value 11 "mid_slider";
					intSliderGrp -label "Treble" -field true -minValue 1 -maxValue 30 -value 11 "treble_slider";
					setParent ..;
				frameLayout -collapsable false -width 392 -label "Color";
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "Objects' color will be filled using a gradient from left to right. Choose color values for each end.";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text -label "Left End";
						canvas -rgbValue 1 1 1 -width 300 -pressCommand ("chooser("+0+")") "left_color";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text -label "Right End";
						canvas -rgbValue 1 1 1 -width 300 -pressCommand ("chooser("+1+")") "right_color";
						setParent ..;
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "Choose your color interpolation method. HSV interpolation is better for bright colors directly across the color spectrum. RGB interpolation is better for combinations which include a very light or a very dark color.";
						setParent ..;
					radioButtonGrp -label "Interpolation Method" -numberOfRadioButtons 2 -labelArray2 "HSV" "RGB" -select 1 "interpolation_radio";
					rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "You may also choose to link each ball's color brightness to its band value.";
						setParent ..;
					radioButtonGrp -label "Driver" -numberOfRadioButtons 2 -labelArray2 "Color Fixed" "Sound Drives Color" -select 1 "color_radio";
					button -label "Create Scene" -command "gatherer()";
					setParent ..;
				setParent ..;
			setParent ..;
		frameLayout -collapsable true -collapse false -width 496 -label "Rendering";
			columnLayout;
				intSliderGrp -label "Start Frame" -field true -minValue 0 -maxValue 10000 -value 0 "start_frame";
				intSliderGrp -label "End Frame" -field true -minValue 0 -maxValue 10000 -value 24 "end_frame";;
				rowLayout -numberOfColumns 2 -columnWidth2 140 500 -columnAlign2 "right" "center";
						text "";
						text -align "left" -width 300 -wordWrap true -label "The file will render into 'maya/projects/default/images' using the current camera's perspective.";
						setParent ..;
				radioButtonGrp -label "Format" -numberOfRadioButtons 2 -labelArray2 ".IFF" ".AVI" -select 1 "type_radio";
				button -label "Render Animation" -command "sceneRenderer()";
				setParent ..;
			setParent ..;
showWindow;